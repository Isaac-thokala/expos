alias functionNum R1;
alias currentPID R2;

if(functionNum == ACQUIRE_TERMINAL) then

	while([TERMINAL_STATUS_TABLE ] == 1) do

		[PROCESS_TABLE + ( currentPID * 16) + 4] = WAIT_TERMINAL;
		multipush(R1,R2,R3);
		call MOD_5;
		multipop(R1,R2,R3);
	endwhile;
	
	[TERMINAL_STATUS_TABLE ] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	
	return;
endif;

if(functionNum == RELEASE_TERMINAL) then
	
	if(currentPID == [TERMINAL_STATUS_TABLE + 1]) then
		[TERMINAL_STATUS_TABLE] = 0;
		alias counter R3;
		counter = 0;
		while(counter < 16) do	
			if([PROCESS_TABLE + (counter*16)+4] == WAIT_TERMINAL) then
				[PROCESS_TABLE + ( counter*16 ) + 4] = READY;
			endif;
			counter = counter + 1;
		endwhile;
		 	R0 = 0;
			return;
	
	else
		R0 = -1;
		return;

	endif;
endif;

if(functionNum == ACQUIRE_DISK) then
	
	while([DISK_STATUS_TABLE ] == 1) do
	
		[PROCESS_TABLE + ( currentPID * 16) + 4] = WAIT_DISK;
		multipush(R1,R2,R3);
		call MOD_5;
		multipop(R1,R2,R3);
	endwhile;
	
	[DISK_STATUS_TABLE ] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;
	
	return;
endif;

if(functionNum == ACQUIRE_SEMAPHORE) then

	alias counter R3;
	alias index R4;
	counter = 0;
	index = -1;
	
	while(counter < 32) do
		if([SEMAPHORE_TABLE + 4 * counter + 1] == 0) then
			index = counter;
			break;
		endif;
		counter = counter + 1;
	endwhile;
	
	if(index == -1) then
		R0 = -1;
		return;		
	endif;
	
	[SEMAPHORE_TABLE + 4 * index] = currentPID;
	[SEMAPHORE_TABLE + 4 * index + 1] = 1;
	
	return;
endif;

if(functionNum == RELEASE_SEMAPHORE) then

	alias counter R3;
	counter = 0;
	alias semtableID R5;
	semtableID = R2;
	 
	if([SEMAPHORE_TABLE + 4 * semtableID] == currentPID) then
	 	[SEMAPHORE_TABLE + 4 * semtableID] = -1;
	 	while(counter < 16) do
	 		if(([PROCESS_TABLE + counter * 16 + 4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE + counter * 16 + 5] == semtableID)) then
	 			[PROCESS_TABLE + 4] = READY;
	 			[PROCESS_TABLE + 5] = -1;
	 		endif;
	 		counter = counter + 1;
	 	endwhile;
	endif;
	[SEMAPHORE_TABLE + 4 * semtableID + 1] = [SEMAPHORE_TABLE + 4 * semtableID + 1] - 1;
	R0 = 0;
	return;
endif;


return;
