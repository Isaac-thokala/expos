alias userSP R10;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16 ) + 11] * 512 -1;

alias functionNum R1;
functionNum = [[PTBR + 2 * ((userSP - 5) / 512)] * 512 + ((userSP - 5) % 512)];

alias currentPID R2;	
alias semID R3;
alias semtableID R4;
alias counter R5;

if(functionNum == INT_SEMLOCK) then

	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 9] = 19;
	
	currentPID = [SYSTEM_STATUS_TABLE + 1];
	semID = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];
	
	if(semID < 0 || semID > 7) then
	
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		SP = userSP;
		ireturn;
	endif;
	
	if([[PROCESS_TABLE + currentPID * 16 + 11] * 512 + 2 * semID + 496] != 1) then
	
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		SP  = userSP;
		ireturn;
	endif;
	
	semtableID = [[PROCESS_TABLE + currentPID * 16 + 11] * 512 + 2 * semID + 1 + 496];
	
	while([SEMAPHORE_TABLE + 4 * semtableID] != currentPID) do
	
		if([SEMAPHORE_TABLE + 4 * semtableID] == -1) then
			break;
		endif;
		
		[PROCESS_TABLE + currentPID * 16 + 4] = WAIT_SEMAPHORE;
		[PROCESS_TABLE + currentPID * 16 + 5] = semtableID;
		
		multipush(R1,R2,R3,R4,R10);
		call MOD_5;
		multipop(R1,R2,R3,R4,R10);
	endwhile;
	
	[SEMAPHORE_TABLE + 4 * semtableID] = currentPID;
	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = 0;
	
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
	SP = userSP;
	ireturn;
	
endif;
	
if(functionNum == INT_SEMUNLOCK) then
	
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 9] = 20;
	
	currentPID = [SYSTEM_STATUS_TABLE + 1];
	semID = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];
	
	if(semID < 0 || semID > 7) then
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		SP = userSP;
		ireturn;
	endif;
	
	if([[PROCESS_TABLE + currentPID * 16 + 11] * 512 + 2 * semID + 496] != 1) then
		[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -1;
		SP  = userSP;
		ireturn;
	endif;	
	
	semtableID = [[PROCESS_TABLE + currentPID * 16 + 11] * 512 + 2 * semID + 1 + 496]; 
	counter = 0;
	
	if([SEMAPHORE_TABLE + 4 * semtableID] != -1) then
		if([SEMAPHORE_TABLE + 4 * semtableID] != -1) then
			[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = -2;
			SP = userSP;
			ireturn;
		endif;
		
		[SEMAPHORE_TABLE + 4 * semtableID] = -1;
		
		while(counter < 16) do
			if(([PROCESS_TABLE + counter * 16 + 4] == WAIT_SEMAPHORE) && ([PROCESS_TABLE + counter * 16 + 5] == semtableID)) then
			
				[PROCESS_TABLE + counter * 16 + 4] = READY;
				[PROCESS_TABLE + counter * 16 + 5] = -1;
			endif;
			counter = counter + 1;
		endwhile;
	endif;
	
	[[PTBR + 2 * ((userSP - 1) / 512)] * 512 + ((userSP - 1) % 512)] = 0;
	
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
	SP = userSP;
	ireturn;	
	
endif;
