[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 9] = 9;

alias userSP R1;
userSP = SP;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16 ) + 11] * 512 -1;

alias filename R2;
filename = [[PTBR + 2 * ((userSP - 4) / 512)] * 512 + ((userSP - 4) % 512)];

alias counter R3;
alias inodeindex R4;
counter = 0;
print filename;
while(counter < 60) do
	if([INODE_TABLE + (counter * 16) + 1] == filename) then
		
		inodeindex = INODE_TABLE + (counter * 16) + 1;
		break;
	endif;
	counter = counter + 1;
	if(counter == 60) then
		alias physicalAddrRetVal R4;
     		physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
     		[physicalAddrRetVal] = -1;
     		
     		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
     		SP = userSP;
     		ireturn;
     	endif;
endwhile;


alias currentPID R5;
currentPID = [SYSTEM_STATUS_TABLE +1];

multipush(R1,R2,R3,R4,R5);
    //alias functionNum R1;
    R1 = EXIT_PROCESS;
    R2 = currentPID;
    call MOD_1;
    
multipop(R1,R2,R3,R4,R5);



alias userpage R6;
userpage = [PROCESS_TABLE + (currentPID * 16) + 11];

[MEMORY_FREE_LIST + userpage] = [MEMORY_FREE_LIST + userpage] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16 ) + 11] * 512 -1;

[PROCESS_TABLE + (currentPID * 16) + 4] = RUNNING;
[PROCESS_TABLE + (currentPID * 16) + 7] = [inodeindex];

[PTBR+00] = 63;
[PTBR+01] = "0100";
[PTBR+02] = 64;
[PTBR+03] = "0100";



counter = 0;
while(counter < 2) do
    multipush(R1,R2,R3,R4,R5,R6);
    alias functionNum R1;
    functionNum =GET_FREE_PAGE ;
    call MOD_2;
    multipop(R1,R2,R3,R4,R5,R6);
    [PTBR+(counter*2)+04] = R0;
    [PTBR+(counter*2)+05] = "0110";
    counter = counter + 1;
endwhile;

counter = 0;
while(counter < 2) do
    multipush(R1,R2,R3,R4,R5,R6);
    alias functionNum R1;
    functionNum = GET_FREE_PAGE;
    call MOD_2;
    multipop(R1,R2,R3,R4,R5,R6);
    [PTBR+(counter*2)+16] = R0;
    [PTBR+(counter*2)+17] = "0110";
    counter = counter + 1;
endwhile;


counter = 0;
while(counter < 4) do
	if([inodeindex+counter+7] == -1) then
		break;
		
	else
        	multipush(R1,R2,R3,R4,R5,R6);
		alias functionNum R1;
		functionNum = GET_FREE_PAGE;
		call MOD_2;
		multipop(R1,R2,R3,R4,R5,R6);
		[PTBR + (counter*2) +08] = R0;
		[PTBR + (counter*2) +09] = "0100";
		//loadi(R0,[inodeindex+counter+7]);
		//print R0;
		//print [inodeindex+counter+7];
		
		multipush(R1,R2,R3,R4,R5,R6);
		alias block R4;
		
		functionNum = DISK_LOAD;
		R2 = currentPID;
		block = [inodeindex+counter+7];
		R3 = R0;
		call MOD_4;
		
		multipop(R1,R2,R3,R4,R5,R6);
		
	endif;
	
	counter = counter + 1;
endwhile;
    
counter = 496;
while(counter < 512) do
	[(userpage * 512) + counter] = -1;
	counter = counter + 1;
endwhile;
    
    
[[PTBR+16]*512] = [[PTBR+08]*512+1];

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
SP = 8 * 512; 
ireturn;



