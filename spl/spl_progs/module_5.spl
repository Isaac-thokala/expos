alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];
multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[PROCESS_TABLE + currentPID * 16 + 12] = SP % 512;
[PROCESS_TABLE + currentPID * 16 + 14] = PTBR;
[PROCESS_TABLE + currentPID * 16 + 15] = 10;

alias process R2;
process=currentPID+1;
alias count R3;
count=0;
while(process<16) do

	if([PROCESS_TABLE + (process* 16) + 4] == CREATED || [PROCESS_TABLE + (process* 16) + 4] == READY) then
 		break;		
 	endif;
 	
 	process=process+1;
 	
endwhile;


alias newPID R4;
alias new_process_table R5;

if(process==16) then
	
	newPID=0;
	new_process_table = PROCESS_TABLE + newPID * 16;
	SP =  [new_process_table + 11] * 512 + [new_process_table + 12];
	PTBR = [new_process_table + 14];
	PTLR = [new_process_table + 15];
	[SYSTEM_STATUS_TABLE + 1] = 0;
	[new_process_table + 4] = RUNNING;
	multipop(BP);
	return;
	

else
	newPID = process;
	new_process_table = PROCESS_TABLE + newPID * 16;
	if([PROCESS_TABLE + (newPID * 16) + 4] == CREATED) then
			SP=[new_process_table + 13];
			[new_process_table + 4] = RUNNING;
			PTBR = [new_process_table + 14];
			PTLR = [new_process_table + 15];
			[SYSTEM_STATUS_TABLE + 1] = newPID;
			[new_process_table + 9] = 0;
			ireturn;
	else
			SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
			PTBR = [new_process_table + 14];
			PTLR = [new_process_table + 15];
			[SYSTEM_STATUS_TABLE + 1] = newPID;
			[new_process_table + 4] = RUNNING;
			multipop(BP);
			
			return;
	endif;

endif;
